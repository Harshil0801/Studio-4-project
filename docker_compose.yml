name: Deploy React App to Apache Server

on:
  push:
    branches:
      - main  # Change this to your target branch if needed

jobs:
  deploy:
    name: üöÄ Deploy to Apache Server
    runs-on: ubuntu-latest

    steps:
      - name: ‚¨áÔ∏è Checkout Repository
        uses: actions/checkout@v4

      - name: üîß Install SSH & SSHPass
        run: sudo apt-get install -y sshpass

      - name: üì¶ Install Dependencies & Build React App
        run: |
          export CI=false  # Prevent ESLint warnings from failing the build
          npm install
          npm run build

      - name: üöö Transfer Files to Apache Server
        env:
          SERVER_HOST: ${{ secrets.SERVER_HOST }}
          SERVER_USERNAME: ${{ secrets.SERVER_USERNAME }}
          SERVER_PASSWORD: ${{ secrets.SERVER_PASSWORD }}
        run: |
          echo "Connecting to $SERVER_HOST..."

          # SSH to clean up old files
          sshpass -p "$SERVER_PASSWORD" ssh -tt -o StrictHostKeyChecking=no $SERVER_USERNAME@$SERVER_HOST << 'EOF'
            echo "‚úÖ Connected to server. Cleaning old files..."
            sudo rm -rf /var/www/html/*  # Remove old build files
            # Ensure Apache user owns the /var/www/html directory after clean up
            sudo chown -R www-data:www-data /var/www/html/
            exit
          EOF

          # Upload new build files
          echo "üì§ Uploading new build files..."
          sshpass -p "$SERVER_PASSWORD" scp -r build/* $SERVER_USERNAME@$SERVER_HOST:/var/www/html/

          # Ensure file ownership after upload
          sshpass -p "$SERVER_PASSWORD" ssh -tt -o StrictHostKeyChecking=no $SERVER_USERNAME@$SERVER_HOST << 'EOF'
            echo "Ensuring correct file permissions..."
            sudo chown -R www-data:www-data /var/www/html/
            exit
          EOF

      # Optional: Uncomment to restart Apache server after deployment
      # - name: üîÅ Restart Apache Server
      #   if: always()
      #   env:
      #     SERVER_HOST: ${{ secrets.SERVER_HOST }}
      #     SERVER_USERNAME: ${{ secrets.SERVER_USERNAME }}
      #     SERVER_PASSWORD: ${{ secrets.SERVER_PASSWORD }}
      #   run: |
      #     sshpass -p "$SERVER_PASSWORD" ssh -tt -o StrictHostKeyChecking=no $SERVER_USERNAME@$SERVER_HOST << 'EOF'
      #       echo "üîÅ Restarting Apache..."
      #       sudo systemctl restart apache2
      #       exit
      #     EOF

  zap-scan:
    name: üõ°Ô∏è OWASP ZAP Security Scan
    runs-on: ubuntu-latest
    needs: deploy  # Waits for deploy job to finish

    steps:
      - name: üñ•Ô∏è Debug Environment Info
        run: |
          echo "OS Info: $(uname -a)"
          echo "Runner Version: $RUNNER_VERSION"

      - name: üê≥ Install Docker
        run: |
          curl -fsSL https://get.docker.com -o get-docker.sh
          sudo sh get-docker.sh
          docker --version

      - name: üîé Run OWASP ZAP Full Scan
        run: |
          docker pull zaproxy/zap-stable
          docker run -v $(pwd):/zap/wrk/:rw -t zaproxy/zap-stable zap-full-scan.py \
            -t http://${{ secrets.SERVER_HOST }}/ -a -I
